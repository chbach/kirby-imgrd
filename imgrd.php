<?php
/**
 * imgrd creates a nice g+ style grid for your images.
 *
 * @author Christoph Bach <info@christoph-bach.net>
 *
**/

function imgrd ($images, $options = array()) {

	$default = array(
		'width' => 450,
		'margin' => 10,
		'imagesPerRow' => 3,
		'cropLast' => false,
		'rowsPerPage' => 0
	);

	$options = array_merge($default, $options);

	$imgrd = new Imgrd($images, $options);

	return $imgrd;
}

class Imgrd {
	private $images = array();
	private $rows = array();
	private $gridWidth;
	private $gridMargin;
	private $originals = array();
	private $cropLast;
	private $imagesPerRow;
	private $rowsPerPage;

	private $imgWidth = 0;
	private $imgHeight = 0;
	private $page = 0;

	function __construct($images, $options) {
		$this->images = $images;
		$this->gridWidth = $options['width'] + $options['margin'];
		$this->gridMargin = $options['margin'];
		$this->cropLast = $options['cropLast'];
		$this->imagesPerRow = $options['imagesPerRow'];
		$this->rowsPerPage = $options['rowsPerPage'];

		global $site;
		$this->page = ($site->uri()->params('page') > 0)? $site->uri->params('page') : 1;

		$this->page--;

		// prevent division by zero
		$imagesPerRow = ($options['imagesPerRow'] > 1)? $options['imagesPerRow'] : 2;

		// heuristic base image width
		$this->imgWidth = (int) ($this->gridWidth / ($imagesPerRow - 1));
		// assuming most pictures have a proportion of 4:3
		$this->imgHeight = (int) ($this->imgWidth / 4 * 3);

		// create the basic grid
		$this->grid();
	}

	/**
	 * This function will generate the grid's rows. Therefore it uses
	 * a rough estimation generated by fitWidth() and fitHeight() to
	 * calculate the number of images per row.
	**/
	public function grid() {
		$row = array();
		$rowWidth = 0;
		$i = 0;

		$images = $this->images;

		foreach($images as $img) {
			$this->originals[$i] = clone $img;

			// scale the image to nice base size
			if ($this->getOrientation($img) < 1) {
				$img->fitWidth($this->imgWidth, true);
			} else {
				$img->fitHeight($this->imgHeight, true);
			}

			$rowWidth = $rowWidth + $img->width() + $this->gridMargin;
			$row[$i] = $img;

			// begin new row if current one is overfull
			if ($rowWidth-$this->gridMargin >= $this->gridWidth
					|| $i == $images->count()-1) {

				$this->rows[] = array(
						'images' => $row,
						'width' => $rowWidth
					);

				$row = array();
				$rowWidth = 0;
			}

			$i++;
		}
	}

	/**
	 * returns the next pages's URL
	**/
	public function getNextURL() {
		global $site;

		return ($this->hasNext())? $site->url()."/".$site->uri()->path()."/page:".($this->page + 2) : false;
	}

	/**
	 * @return the previous pages's URL
	**/
	public function getPreviousURL() {
		global $site;
		if ($this->page === 1)
			return $site->url()."/".$site->uri()->path();
		else
			return ($this->hasPrevious())? $site->url()."/".$site->uri()->path()."/page:".($this->page) : false;
	}

	/**
	 * @return true if there's a previous page.
	**/
	public function hasPrevious() {
		return (bool) ($this->page > 0);
	}

	/**
	 * @return true if there's another page
	**/
	public function hasNext() {
		if ($this->rowsPerPage < 1) {
			return false;
		} else {
			return (bool) ($this->page + 1 < $this->countPages());
		}
	}

	/**
	 * @return number of pages
	**/
	public function countPages() {
		if ($this->rowsPerPage > 0) {
			$numRows = count($this->rows);
			$add = ($numRows % $this->rowsPerPage > 0)? 1 : 0;

			return ((int) ($numRows / $this->rowsPerPage) + $add);
		}

		return 1;
	}

	/**
	 *	prints the grid.
	**/
	public function show() {
		// print everything
		if ($this->rowsPerPage < 1) {
			$this->printRows(0, count($this->rows)-1);
		} else {

			$min = $this->page * $this->rowsPerPage;
			$max = $min + $this->rowsPerPage;

			if ($min < count($this->rows)) {
				$this->printRows($min, $max-1);
			}
		}
	}

	/**
	 * prints rows from $start to $end
	**/
	private function printRows($start, $end) {
		$start = max(0, $start);
		$end = min($end, count($this->rows)-1);

		for ($i = $start; $i <= $end; $i++) {
			$this->fitRow($this->rows[$i]['images'], $this->rows[$i]['width']);
		}
	}

	/**
	 * This function will make the images of a row the same height
	 * and it will scale all images so that they exactly fit in a row
	 *
	 * @param $row
	 *        Array of image objects that will fill a row. The row's width should
	 *        be equal or larger compared to the grid's width. Otherwise it will
	 *        assume that this is the last row of the grid and will just adjust
	 *        the images' height.
	 * @param $rowWidth
	 * 				The width of all images together
	**/
	private function fitRow($row, $rowWidth) {
		$margin = (count($row)) * $this->gridMargin;

		if ($rowWidth >= 0.9 * $this->gridWidth)
			$scaleFactor = ($this->gridWidth - $margin) / ($rowWidth - $margin);
		else {
			$scaleFactor = 1;
		}

		$fixedHeight = 0;
		$realWidth = 0;
		$i = 0;

		// scale images down, so that they will fit
		foreach ($row as $key => $img) {
			$newWidth = (int) ($img->width() * $scaleFactor);
			$img->fitWidth($newWidth, true);

			// create fixed height so that every image has the same height
			if ($fixedHeight > 0)
				$img->info()->height = $fixedHeight;
			else
				$fixedHeight = $img->height();

			// last element will be cropped to pixel-perfect size
			if ($i == count($row)-1 && ($scaleFactor < 1 || $this->cropLast)) {
				$fittedWidth = $this->gridWidth - $margin - $realWidth;
				$img->info()->width = $fittedWidth;
			}

			$realWidth = $realWidth + $img->width();
			$i++;
		}

		$this->printRow($row);
	}

	/**
	 * Prints a row.
	 *
	 * @param $row
	 *        An array of image objects
  **/
	private function printRow($row) {
		foreach ($row as $key => $img) {
			$options = array(
					'width' => $img->width(),
					'height' => $img->height(),
					'crop' => true
				);

			// modifiy markup here
			echo "<a href=\"".$this->originals[$key]->url()."\"
			      class=\"fancybox\" rel=\"gallery\">\n";
			echo thumb($this->originals[$key], $options)."\n";
			echo "</a>\n";
		}
	}

	/**
	 * @param $img
	 *        the image object
	 * @return
	 *        0 for landscape
	 *        1 for portrait
	 *
	**/
	private function getOrientation($img) {
		return ($img->width() > $img->height())? 0 : 1;
	}
}
?>
